C51 COMPILER V9.52.0.0   ESP8266                                                           05/07/2016 07:42:38 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ESP8266
OBJECT MODULE PLACED IN ..\output\esp8266.obj
COMPILER INVOKED BY: D:\study\ide\keil451\C51\BIN\C51.EXE ..\user\esp8266.c BROWSE INCDIR(..\user\include) DEBUG OBJECTE
                    -XTEND PRINT(..\listing\esp8266.lst) TABS(2) OBJECT(..\output\esp8266.obj)

line level    source

   1          #include<stdio.h> 
   2          #include"esp8266.h"
   3          #include"define.h"
   4          #include"lux.h"
   5          #include"delay.h"
   6          
   7          
   8          uint cmd;
   9          uchar respond_data;
  10          
  11          //char CIPMUX[]="AT+CIPMUX=1";
  12          //char SERVER[]="AT+CIPSERVER=1,8800";
  13          
  14          
  15          void ESP8266_Init(){
  16   1          
  17   1          unsigned int cmd=0;
  18   1          unsigned char respond_data=0; 
  19   1      }
  20          
  21          void print(char *string){//向esp8266发送数据
  22   1        ES=0;
  23   1        while(*string!='\0'){
  24   2              SBUF = *string; //把数据A送给SBUF缓存器中
  25   2              while(TI != 1);//判断发送标志位TI，如果发送完成，硬件会置TI标志位1
  26   2              TI = 0;  //TI清为0，以备下一次发送  
  27   2              string++;  
  28   2                
  29   2        }
  30   1        string=NULL;
  31   1          //换行结束符
  32   1        SBUF = '\r'; 
  33   1        while(TI != 1);
  34   1          TI = 0;   
  35   1        SBUF = '\n';
  36   1          while(TI != 1);
  37   1          TI = 0;  
  38   1        ES=1;
  39   1      }
  40          
  41          int length(char *string){
  42   1          int i=0;
  43   1          while(*(string++)!='\0')
  44   1              i++;
  45   1          return i;
  46   1      }
  47          
  48          void save_data(char buff){
  49   1              
  50   1              if(search_str("readyOKOK",buff)==1)
  51   1                  respond_data=1;
  52   1                
  53   1          
  54   1              
C51 COMPILER V9.52.0.0   ESP8266                                                           05/07/2016 07:42:38 PAGE 2   

  55   1      }
  56          
  57          /*void parse_cmd(char buff){
  58              if(buff=='I'){
  59                  cmd_phone[0]=buff;
  60                
  61              }
  62              if(cmd_phone[0]=='I'&&buff=='P'){
  63                  cmd_phone[1]=buff;
  64              }
  65              if(cmd_phone[1]=='P'&&buff=='D'){
  66                  cmd_phone[2]=buff;
  67              }
  68              if(buff==':'&&cmd_phone[2]=='D'){
  69                  cmd_phone[3]=buff;
  70              }
  71              if(cmd_phone[3]==':'){
  72                  cmd_phone[4]=buff;
  73              }
  74              if(cmd_phone[4]!=0){
  75                  cmd_phone[5]=buff;
  76              }
  77              if(cmd_phone[4]!=cmd_phone[5]){
  78                  //motor(cmd_phone[4],cmd_phone[5]);
  79                
  80              }
  81              
  82          }*/
  83          
  84          int search_str(char *str,char buff){
  85   1        unsigned i=0;
  86   1        while(*(str+i)!='\0'){
  87   2            if(*(str+i)==buff)
  88   2              return 1;
  89   2            i++;
  90   2      }
  91   1      return 0;
  92   1          
  93   1          
  94   1      }
  95          
  96          /*----------------------分割线拿来分类用的，下面的是底层函数-------------------------------*/
  97          void send_cmd(char *command){
  98   1        esp_delay();
  99   1        print(command);
 100   1        if(command=="AT+RST") cmd=AT_RST;
 101   1        else if(command=="AT+CWMODE=2")  cmd=AT_CWMODE;
 102   1        else if(command=="AT+CWSAP=\"ESP8266\",\"12345678\",1,3")cmd=AT_CWSAP;
 103   1          else if(command=="AT+CIPMUX=1")cmd=AT_CIPMUX;
 104   1          else if(command=="AT+CIPSERVER=1,8800")cmd=AT_CIPSERVER;
 105   1          else cmd=AT_CIPSEND;
 106   1        data_init();
 107   1      }
 108          
 109          void data_init(){//初始化数据
 110   1          respond_data=0;
 111   1      }
 112          
 113          int check_respond(unsigned int def_cmd){
 114   1          switch(def_cmd){
 115   2              case AT_RST:
 116   2                  if(respond_data==1){
C51 COMPILER V9.52.0.0   ESP8266                                                           05/07/2016 07:42:38 PAGE 3   

 117   3                    respond_data=0;
 118   3                      return 1;
 119   3                  }
 120   2                  else
 121   2                      return 0;
 122   2              case AT_CWMODE:
 123   2                  if(respond_data==1){
 124   3                    respond_data=0;
 125   3                      return 1;
 126   3                  }
 127   2                  else
 128   2                      return 0;
 129   2              case AT_CWSAP:
 130   2                  if(respond_data==1)
 131   2                      return 1;
 132   2                  else
 133   2                      return 0;
 134   2              case AT_CIPMUX:
 135   2                  if(respond_data==1){
 136   3                    respond_data=0;
 137   3                      return 1;
 138   3                }
 139   2                  else
 140   2                      return 0;
 141   2              case AT_CIPSERVER:
 142   2                  if(respond_data==1){
 143   3                    respond_data=0;
 144   3                      return 1;
 145   3                  }
 146   2                  else
 147   2                      return 0;
 148   2              case AT_CIPSEND:
 149   2                  if(respond_data==1){
 150   3                    respond_data=0;
 151   3                      return 1;
 152   3                  }
 153   2                  else
 154   2                      return 0;
 155   2          }
 156   1          return 0;
 157   1      }
 158          
 159          void esp_delay(){
 160   1          unsigned short i=0xffff;
 161   1          while(i--);
 162   1      }
 163          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    485    ----
   CONSTANT SIZE    =     95    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
